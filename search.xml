<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>deep选择器的作用原理</title>
      <link href="/deep%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86/"/>
      <url>/deep%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在我使用vue3进行样式调整时，我发现有时会出现使用第三方库样式调整无效(下方以Element-plus为例)的情况，网上讲解了很多关于深度选择器的作用原理，但是一直不得要领，我想有时候你真的需要去看一眼源代码可能才能理解很多时候原本自己不理解的东西吧。</p><p>首先我想强调一点的是，这应该是使用scoped时会出现的问题，但是我们应当尽量用scoped去写样式，不能因小失大，毕竟scoped提供的隔离的作用才是我们想要的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button plain @click=&quot;dialogVisible = true&quot;&gt; Click to open the Dialog &lt;/el-button&gt;<br>    &lt;el-dialog v-model=&quot;dialogVisible&quot; title=&quot;Tips&quot; width=&quot;500&quot; :before-close=&quot;handleClose&quot;&gt;<br>      &lt;span&gt;This is a message&lt;/span&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import &#123; ElMessageBox &#125; from &#x27;element-plus&#x27;<br><br>const dialogVisible = ref(false)<br><br>const handleClose = () =&gt; &#123;<br>  ElMessageBox.confirm(&#x27;Are you sure to close this dialog?&#x27;)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.el-overlay .el-dialog__body &#123;<br>  color: red;<br>  background-color: aquamarine;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>以这段代码为例，可以发现其实我们写的样式并没有生效。</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240401201311443.png" alt="image-20240401201311443"></p><p>我们搜索一下最后我们写的样式到哪里去了。</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240401201532841.png" alt="image-20240401201532841"></p><p>会发现编译完后css结果带上了<code>data-xxx</code>的属性，但是原来的元素却并不具有这个属性，所以最后就失效了。</p><p>查阅网上资料可以得知，对于vue来说，一个组件包含了子组件balabala后，最后编译的结果只有根组件会带有<code>data-xxx</code>这样的属性，显然Element-plus对ElDialog这个组件做了很多封装，所以最后写的样式被转换了但是html元素没有加上<code>data-xxx</code>属性。</p><p>使用<code>:deep()</code>包裹一下再看看结果。</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240401202022533.png" alt="image-20240401202022533"></p><p>可以看到使用<code>:deep()</code>的作用其实是将<code>data-xxx</code>属性提前到父元素了(这里我没有写父元素所以是[data-xxx])，假如说我们这么写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-dialog</span> :<span class="hljs-built_in">deep</span>(.el-dialog__body) &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">background-color</span>: aquamarine;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后你会发现样式又失效了，这里就不展示了，原因是当你去寻找<code>.el-dialog</code>元素时会发现他也不是根元素，没有<code>data-xxx</code>属性。</p><p>从上面的几个现象来看，我认为<code>:deep()</code>的作用原理应该就是将<code>data-xxx</code>属性提前。</p><p>所以我认为一般当我们无法修改某个元素的样式时，直接单独提出来用<code>:deep()</code>包裹就能正常修改样式了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl中使用系统代理</title>
      <link href="/wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86/"/>
      <url>/wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词积累1</title>
      <link href="/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E7%A7%AF%E7%B4%AF1/"/>
      <url>/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E7%A7%AF%E7%B4%AF1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode插件推荐</title>
      <link href="/VSCode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/VSCode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端自动化部署方式</title>
      <link href="/%E5%90%8E%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/%E5%90%8E%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端自动化部署方式</title>
      <link href="/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>  这里主要介绍我在软件系统设计与分析使用的Github Actions部署。</p><ol><li>为你的项目创建<code>.github/workflows</code>二级目录，就像这样。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于杠r的那些事</title>
      <link href="/%E5%85%B3%E4%BA%8E%E6%9D%A0r%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/%E5%85%B3%E4%BA%8E%E6%9D%A0r%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我在大一一位C语言助教的作品，因为非常喜欢，本文经过原作者同意将其搬运到了我的博客当中(有所删改)。如果对本内容有相关疑问，欢迎联系<a href="mailto:&#49;&#55;&#x30;&#x36;&#x7a;&#x63;&#121;&#64;&#98;&#117;&#97;&#97;&#x2e;&#x65;&#x64;&#117;&#x2e;&#99;&#x6e;">&#49;&#55;&#x30;&#x36;&#x7a;&#x63;&#121;&#64;&#98;&#117;&#97;&#97;&#x2e;&#x65;&#x64;&#117;&#x2e;&#99;&#x6e;</a>。</p></blockquote><h2 id="开头语"><a href="#开头语" class="headerlink" title="开头语"></a>开头语</h2><p>这是一个十分令人头疼的问题，头疼你我他，即便是老师和助教，一个不小心也不可避免地会犯下这样的错误。</p><p>同学们在做题的时候，一般在<strong>Windows</strong> 系统下本地测试，助教们也普遍在<strong>Windows</strong> 系统下进行数据的生成。虽然OJ一般来说会自动去掉行末的空白字符再进行评测，但是有的时候也同样会出现问题。</p><p>然后导致的问题就是，同学们要无缘无故地为这样的错误买单，部分的助教和老师们也会认为这是一个大家本就该考虑到的问题。这也会导致双方无法在这个问题上达成共识，在很多题目上助教和老师一个给不出解决的方法。在北航，每一年都要因为这个事情闹一次争执一次，一直得不到有效的解决方法，故笔者打算写一篇说明，针对这个问题进行一下科普。</p><h2 id="关于-r和-n的来历"><a href="#关于-r和-n的来历" class="headerlink" title="关于\r和\n的来历"></a>关于<code>\r</code>和<code>\n</code>的来历</h2><p>以下内容摘自该博客 : <a href="https://www.cnblogs.com/the-tops/p/5626828.html%E3%80%82">https://www.cnblogs.com/the-tops/p/5626828.html。</a></p><blockquote><p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。<br>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做<code>回车</code>，告诉打字机把打印头定位在左边界；另一个叫做<code>换行</code>，告诉打字机把纸向下移一行。<br>这就是<code>换行</code>和<code>回车</code>的来历，从它们的英语名字上也可以看出一二。<br>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。<br>Unix系统里，每行结尾只有<code>&lt;换行&gt;</code>，即<code>\n</code>；Windows系统里面，每行结尾是<code>&lt;换行&gt;&lt;回车&gt;</code>，即<code>\r\n</code>；Mac系统里，每行结尾是<code>&lt;回车&gt;</code>。一个直接后果是，Unix&#x2F;Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix&#x2F;Mac下打开的话，在每行的结尾可能会多出一个<code>^M</code>符号。<br>c语言编程时（windows系统）<code>\r</code> 就是return 回到 本行  行首  这就会把这一行以前的输出  覆盖掉。</p></blockquote><p>以下内容摘自该博客 : <a href="https://blog.csdn.net/lgouc/article/details/7815523%E3%80%82">https://blog.csdn.net/lgouc/article/details/7815523。</a></p><blockquote><p>记得在Windows下学X86汇编语言时，用0DH(<code>\r</code>)和0AH(<code>\n</code>)来输出回车(跳到下一行的开始处)。问题来了，在Windows下是先回车再换行呢还是先换行再回车呢？在Unix系统下换行只有<code>\n</code>，MACOS下只有<code>\r</code>(网上是这么说的, 没用过Mac OS, 无从证实)，都不会出现上述的问题。<br>现在新建一个文本文档，其内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240319214647333.png" alt="image-20240319214647333"></p><p>现在用C语言二进制形式将其读入字符串并按十进制输出。结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240319214700932.png" alt="image-20240319214700932"></p><p>可以看出回车是 13 和 10 也就是<code>\r</code> 和<code>\n</code> ，即先回车后换行。</p></blockquote><p>一言以蔽之，有如下的区别。</p><ul><li>回车符<code>\r</code> 和换行符<code>\n</code> ，是 2 个符。一个回车，一个换行。<code>\r</code>仅仅是回车，<code>\n</code>是换行。一个是控制<br>屏幕或者从键盘的Enter键输入。另一个是控制“打印机”！</li><li>回车 &#x3D; 光标到达最左侧，换行 &#x3D; 移到下一行。如果只回车，打印的东西会覆盖同行以前的内容，如<br>果只换行，打印的东西会在下一行的先一个位置继续。</li><li><code>\r</code> 实际是回到行首。<code>\n</code> 如果下一行已经有了一些内容的话它会在那些内容的后边.因为一般<br>情况下下一行是没有数据的,很多时候<code>\n</code> 也就成了<code>\r\n</code> 作用一样。</li></ul><h2 id="在Linux系统下-r的具体表现形式"><a href="#在Linux系统下-r的具体表现形式" class="headerlink" title="在Linux系统下\r的具体表现形式"></a>在Linux系统下<code>\r</code>的具体表现形式</h2><h3 id="输出-r"><a href="#输出-r" class="headerlink" title="输出\r"></a>输出<code>\r</code></h3><p>我们用不同的程序来演示一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dddddd\n \r &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;12345&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240319215149534.png" alt="image-20240319215149534"></p><p>可以看到其输出为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dddddd</span><br><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h3 id="输入-r"><a href="#输入-r" class="headerlink" title="输入\r"></a>输入<code>\r</code></h3><p>以下面的样例为例</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">x</span> s z <span class="hljs-keyword">c</span> o q k t<br><span class="hljs-keyword">x</span> s z <span class="hljs-keyword">c</span> o q k t<br></code></pre></td></tr></table></figure><p>可以看到，这两行的长度是<strong>完全一致</strong>的，且行末都没有空格。</p><p>但是如果该数据是<strong>在Windows 系统下，写程序，通过文件重定向生成</strong>的，以最后一行作为文件的结尾，我们采用以下程序来查看每一个字符串的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">1100</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span> (gets(s))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s is : %s\nthe length of s is : %d\n&quot;</span>, s,<span class="hljs-built_in">strlen</span>(s));<br>&#125;<br></code></pre></td></tr></table></figure><p>以下<strong>Windows 10 系统</strong>下的<strong>devcpp</strong> 查看到的输出:</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240319215425084.png" alt="image-20240319215425084"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">s <span class="hljs-keyword">is</span> : <span class="hljs-type">x</span> s z c o q k t<br>the length <span class="hljs-keyword">of</span> s <span class="hljs-keyword">is</span> : 15<br>s <span class="hljs-keyword">is</span> : <span class="hljs-type">x</span> s z c o q k t<br>the length <span class="hljs-keyword">of</span> s <span class="hljs-keyword">is</span> : 15<br></code></pre></td></tr></table></figure><p>而在以<strong>Linux 环境</strong>下部署的在线IDE当中所看到的输出却是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240319215452299.png" alt="image-20240319215452299"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">s <span class="hljs-keyword">is</span> : <span class="hljs-type">x</span> s z c o q k t<br>the length <span class="hljs-keyword">of</span> s <span class="hljs-keyword">is</span> : 16<br>s <span class="hljs-keyword">is</span> : <span class="hljs-type">x</span> s z c o q k t<br>the length <span class="hljs-keyword">of</span> s <span class="hljs-keyword">is</span> : 15<br></code></pre></td></tr></table></figure><p>看到差别了吗？第一行和第二行的长度，在Linux 下竟然是<strong>不同</strong>的！</p><p>说白了，这就是第一行的<code>\r</code> 在作祟(而第二行的末尾没有换行，直接就是<code>EOF</code>了， <code>EOF</code>也不会计算在字符串内)</p><h2 id="对同学们来说的解决办法"><a href="#对同学们来说的解决办法" class="headerlink" title="对同学们来说的解决办法"></a>对同学们来说的解决办法</h2><p>作为同学，日后如果依旧要写代码，无论是做什么工作，都会不可避免地和<code>\r</code> 打交道。为此，也就有必要了解处理<code>\r</code> 的办法。</p><p>一般来说，直接使用<strong>scanf</strong>函数的话，除了采用<code>%c</code>读取单个字符之外，都会直接略过所有的空白字符（显然， <code>\r</code>也在此列），基本不需要处理这样的问题。</p><p>但是如果采用<strong>gets</strong>或者<strong>fgets</strong>函数，则需要考虑行末<code>\r</code>的问题。</p><p>而鉴于<strong>gets</strong>函数已经在现有的<strong>C&#x2F;C++<strong>标准当中被废除（只有</strong>devcpp</strong>等老旧的IDE才可以使用），所以推荐大家在日后写代码的时候，采用<code>fgets</code>函数。</p><h3 id="采用fgets函数的解决方法"><a href="#采用fgets函数的解决方法" class="headerlink" title="采用fgets函数的解决方法"></a>采用<code>fgets</code>函数的解决方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>gets(s);<br>len = <span class="hljs-built_in">strlen</span>(s);<br><span class="hljs-keyword">while</span> (s[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\r&#x27;</span>) s[--len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-comment">//通过对len前置自减，可以保证字符串s去掉\r之后，len依旧等于strlen(s)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="采用fgets函数的解决方法-1"><a href="#采用fgets函数的解决方法-1" class="headerlink" title="采用fgets函数的解决方法"></a>采用<code>fgets</code>函数的解决方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>fgets(s, <span class="hljs-number">110</span>, <span class="hljs-built_in">stdin</span>);<br>len = <span class="hljs-built_in">strlen</span>(s);<br><span class="hljs-keyword">while</span> (s[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\n&#x27;</span> || s[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\r&#x27;</span>) s[--len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-comment">//通过对len前置自减，可以保证字符串s去掉\r和\n之后，len依旧等于strlen(s)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-语言采用getline函数的解决方法"><a href="#C-语言采用getline函数的解决方法" class="headerlink" title="C++语言采用getline函数的解决方法"></a><code>C++</code>语言采用<code>getline</code>函数的解决方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> in;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>getline(<span class="hljs-built_in">cin</span>, in);<br><span class="hljs-keyword">while</span> (in.back() == <span class="hljs-string">&#x27;\r&#x27;</span>) in.pop_back();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节后语"><a href="#节后语" class="headerlink" title="节后语"></a>节后语</h2><blockquote><p>没什么想说的，只希望这篇文章能够帮助大家，让同学们少一些疑惑，减少老师、助教与学生之间在这个问题上年复一年的纷争。</p><p>​——开花学长</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队git合作方式</title>
      <link href="/%E5%9B%A2%E9%98%9Fgit%E5%90%88%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
      <url>/%E5%9B%A2%E9%98%9Fgit%E5%90%88%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我在软件工程课程团队大作业书写的一份我们团队需要遵照的git开发流程。</p></blockquote><hr><h2 id="关于分支"><a href="#关于分支" class="headerlink" title="关于分支"></a>关于分支</h2><ol><li><strong>main</strong>分支为主分支和上线分支，一般成员请勿修改，完成一次迭代时将<strong>dev</strong>分支<strong>pull request</strong>到<strong>main</strong>分支</li><li><strong>dev</strong>分支是用于开发和合作的分支，请勿执行<strong>git rebase</strong></li></ol><h2 id="合作流程"><a href="#合作流程" class="headerlink" title="合作流程"></a>合作流程</h2><hr><h3 id="如何开发自己的分支-实现自己的功能或对项目进行重构等"><a href="#如何开发自己的分支-实现自己的功能或对项目进行重构等" class="headerlink" title="如何开发自己的分支(实现自己的功能或对项目进行重构等)"></a>如何开发自己的分支(实现自己的功能或对项目进行重构等)</h3><ol><li><strong>clone</strong>仓库</li><li><strong>checkout</strong>一个自己的分支</li><li>在自己分支上进行代码修改, <strong>commit</strong>时请写清楚<strong>commit</strong>信息，以便后续版本回溯时查看信息</li><li>执行<strong>git push</strong>命令，完成后<strong>remote</strong>仓库<strong>dev</strong>分支就会出现你的<code>&lt;your branch&gt;</code></li><li>提交<strong>pull request</strong>，将<code>&lt;your branch&gt;</code>分支内容合并到<strong>main</strong>分支</li></ol><p>完成上面步骤后，仓库管理员可以查看request消息，决定是否将成员的修改应用到主分支</p><h3 id="如何进行合作开发"><a href="#如何进行合作开发" class="headerlink" title="如何进行合作开发"></a>如何进行合作开发</h3><p>上面的步骤是在<strong>main</strong>分支稳定的情况下，无特殊情况，一般不会出现错误，当团队进行合作开发时，如果按照上面的流程开发，那么仓库管理员的工作就会剧增，因为他需要处理团队其他成员的修改，那我们当然不希望大佬累成🐕了，我们想自己先添加别人开发的内容或查看我们共同依赖文件的修改等，如果按照上面的流程，我们的工作流程是这样的：</p><ol><li>执行上面的1-4步骤，这样远程仓库就会出现团队成员的分支</li><li>当你需要查看其他成员的修改内容时，执行<strong>git checkout <code>&lt;other branch&gt;</code><strong>，再执行</strong>git pull</strong>命令</li><li>切换到<code>&lt;your  branch&gt;</code>，执行<strong>git merge <code>&lt;other branch&gt;</code> <strong>命令，这时需要根据情况处理合并冲突，处理完毕之后再进行</strong>commit</strong>，此时会有默认提交消息为*merge branch of <code>&lt;other branch&gt;</code> into <code>&lt;your branch&gt;</code>*，提交完毕后，可以查看<strong>commit</strong>历史，能够发现出现其他人的历史<strong>commit</strong>消息</li><li>再进行<strong>git push</strong>操作</li></ol><p>上面步骤可以看到，当一个团队如果只是2个人的话，只需要一个人合并然后操作就可以了，但是团队稍微多一两个人，情况就比较麻烦，比如说，A拿到B和C的内容进行合并修改，B又拿到C的，C又拿到A的，这样一是关系冗余，二是最后<strong>pull request</strong>的时候，仓库管理员还是会处理所有成员的修改，可能其他成员的修改还是不能直接放进主仓库中</p><h3 id="利用dev分支进行开发"><a href="#利用dev分支进行开发" class="headerlink" title="利用dev分支进行开发"></a>利用dev分支进行开发</h3><p>首先仓库管理员需要建立<strong>main</strong>分支和<strong>dev</strong>分支，对于某一个团队成员来说，他的操作流程大体是这样的：</p><p>我们认为你已经<strong>clone</strong>了仓库等，且已经在开发自己的功能，你可以按照下面的流程操作</p><ol><li><strong>checkout</strong>到<strong>dev分支</strong></li><li>执行<strong>git pull</strong>命令</li><li><strong>checkout</strong>到<code>&lt;your branch&gt;</code>分支</li><li>执行<strong>git merge dev</strong>命令，按照上面3步骤操作</li><li><strong>checkout</strong>到<strong>dev</strong>分支</li><li>执行*git merge <code>&lt;your branch&gt;</code><em>命令，此时一般不会出现冲突，git自动为我们添加</em>merge branch …*消息</li><li>执行<strong>git push</strong>操作，此时可能出现下面的情况：<ol><li>push成功，此时是自上次拉取后还未有其他人推送。</li><li>push失败，此时为了统一做法，我们要求处理合并冲突统一在非主分支，我们先进行版本回退，执行<code>git reset --hard HEAD^</code>命令，再执行<code>git pull</code>命令拉取到最新修改，再重复<code>1-7步骤</code>(有的人可能想说，那我push失败直接pull然后再处理冲突不就可以了吗，我们执行版本回退切换自己的分支进行合并，<strong>一是</strong>相当于我进行conflict解决时<strong>统一了规范</strong>，在自己的分支上解决冲突，这样可以避免有人直接在dev分支上解决冲突了之后，<strong>忘记把修改合并到自己的分支</strong>了，然后下一次修改的时候在自己的分支上还按照冲突之前的版本进行coding增加后续coding工作量，<strong>二是</strong>当有人如果有人希望查看git history的时候，我们肯定是希望减少<code>merge branch ...</code>这样的信息，这样虽然没有减少commit history，但是相当于是提醒我们书写详细的<strong>commit</strong>信息了(有的同学比较懒解决冲突之后直接把git生成的信息提交了))</li></ol></li></ol><p>当所有成员的功能都正常添加到dev分支后，仓库管理员将<strong>dev</strong>分支内容合并到<strong>main</strong>分支，或由你提交一个<strong>pull request</strong></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li><p>为什么我执行了<strong>git pull</strong>，但是我看不到别人修改的内容？</p><blockquote><p>请注意你执行命令时所在的分支，同理，当你执行<strong>git push</strong>时，请不要忘记先切换到<strong>dev</strong>分支，否则<strong>remote</strong>仓库将会出现你的分支，但是正常操作的人不会查看到的你的修改</p></blockquote></li><li><p>如果我觉得<code>merge branch ...</code>这样的消息没有意义，我应该怎么做？</p><blockquote><p>可以在*<code>&lt;your branch&gt;</code>*将<strong>git merge</strong>命令替换成<strong>git rebase</strong>命令，这样就不会出现merge消息，但是请注意，不要在<strong>dev</strong>分支执行<strong>git rebase</strong>操作，因为<strong>git rebase</strong>将会修改提交信息历史，不便于版本回溯，保留必要的合并信息是有必要的，可以方便查看是哪位成员的修改出现了问题</p></blockquote></li><li><p>如果我还没有开发完成，但是我现在需要依赖其他成员的修改，我还不想要commit和push，应当怎么做？</p><blockquote><p>可以先执行<strong>git stash</strong>命令，再切换到dev分支拉取，再切换到自己的分支进行dev分支内容的合并，（可能需要处理冲突），再执行<strong>git stash apply</strong>命令，(执行这条命令时仍然有可能出现冲突，因为之前暂存的修改就有可能与合并后的内容冲突)，接下来就可以接着之前的内容继续开发了</p></blockquote></li><li><p>可以给一些建议吗？</p><blockquote><p>笔者认为可以commit一次就完成一次push工作，这样可以第一时间找到冲突的问题，其他成员如果使用<strong>git rebase</strong>命令时也便于合并，如果你多次commit之后最后再push，这样用<strong>git rebase</strong>命令的成员可能需要处理很多次冲突，还可以利用vscode，github desktop图形化操作执行git命令</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash及相关代理的设置</title>
      <link href="/Clash%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%90%86%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/Clash%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%90%86%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这是我关于Clash的一些配置及系统相关代理的一些对应设置。</p><h2 id="Clash配置"><a href="#Clash配置" class="headerlink" title="Clash配置"></a>Clash配置</h2><h3 id="Bypass设置"><a href="#Bypass设置" class="headerlink" title="Bypass设置"></a>Bypass设置</h3><p>当Clash打开System Proxy后，访问校园网校内网站会出现被屏蔽的状态。我有试过在配置文件中直接设置校内域名<strong>直连</strong>，但是不知道为什么没有生效，同时机场订阅更新后同样会重置自己的修改。Clash提供了<code>Bypass</code>选项(注意，在代理类型为HTTP时生效，PAC模式没有Bypass选项)。<img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240318230048146.png" alt="image-20240318230048146">在配置文件中加入校园网地址如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">bypass:</span><br>  <span class="hljs-comment"># ...</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*.xxx.edu.cn&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;xxx.edu.cn&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;local&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><p>Git默认是不经过系统代理的，所以经常会出现已经打开了代理但是仍然出现<code>git clone</code>、<code>git push</code>等失败的情况。可以通过配置Git代理解决。</p><ul><li><p>在~&#x2F;.gitconfig中添加下面配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 7890为Clash默认端口</span><br><span class="hljs-section">[http]</span><br><span class="hljs-attr">proxy</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span><br><span class="hljs-section">[https]</span><br><span class="hljs-attr">proxy</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure></li><li><p>或在终端输入如下命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy 127.0.0.1:7890</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy 127.0.0.1:7890</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="npm设置"><a href="#npm设置" class="headerlink" title="npm设置"></a>npm设置</h2><p>同Git。</p><ul><li><p>在~&#x2F;.npmrc中添加如下配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">proxy</span>=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure></li><li><p>或在终端输入如下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">proxy</span>=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure></li></ul><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p>类似的，在各IDE和其他软件中都提供了自行配置软件代理的选项，自行配置即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置教程</title>
      <link href="/VSCode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/VSCode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍了<strong>Windows</strong>平台下VSCode C语言环境的配置教程。</p><p>我将介绍两种编译链的配置方式。</p><h2 id="MINGW-Minimalist-GNU-for-Windows"><a href="#MINGW-Minimalist-GNU-for-Windows" class="headerlink" title="MINGW(Minimalist GNU for Windows)"></a>MINGW(Minimalist GNU for Windows)</h2><p>这种方式网上教程比较普遍，我所了解的最简单的方式是下载谷雨同学<a href="https://github.com/VSCodeConfigHelper/v3">VS Code Config Helper</a>，按照软件步骤下载MINGW，然后生成<code>.vscode</code>配置即可食用。</p><h2 id="CLANG-LLVM"><a href="#CLANG-LLVM" class="headerlink" title="CLANG+LLVM"></a>CLANG+LLVM</h2><p>LLVM(<u>Low Level Virtual Machine</u>)被认为是比GCC设计更好的一个编译系统，CLANG是LLVM的前端(编译原理中的概念)。网上的普遍评价是CLANG的性能比GCC更好，在大型项目中明显表现更优，也有人说近年来GCC不断改进性能跟CLANG已经相差不大了，对我而言，使用CLANG的体验是获得的代码提示会更好。通过官网下载的CLANG在Windows中会缺少依赖库，因为CLANG的目标平台并不是Windows。网上的其他教程会推荐下载MYSY2将CLANG目录移动到MYSY2目录，这样就补足了CLANG的依赖库。</p><p>我个人是通过Scoop安装的，Scoop的安装请查阅官网或者其他资料。</p><ol><li><p>先添加<code>extra</code>库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scoop bucket add extra<br></code></pre></td></tr></table></figure></li><li><p>搜索<code>llvm</code>相关库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scoop search llvm<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240318195811872.png" alt="image-20240318195811872"></p></li><li><p>下载包含Windows依赖项的<code>llvm</code>，我这里是<code>mingw-mstorsjo-llvm-ucrt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scoop install mingw-mstorsjo-llvm-ucrt<br></code></pre></td></tr></table></figure></li><li><p>重启电脑，llvm相关的环境变量已经配置好，这也是推荐使用scoop的原因。</p><p><img src="https://cdn.jsdelivr.net/gh/Q9-K/Picture@main/image-20240318200033944.png" alt="image-20240318200033944"></p></li><li><p>配置VSCode。首先，需要首先禁用或者卸载微软官方的<code>C/C++</code>插件。然后，安装Clangd插件和CodeLLDB插件。</p></li><li><p>最后是按照VSCode的方式书写配置，VSCode的配置在项目目录下的<code>.vscode</code>文件夹中。在<code>.vscode</code>文件夹中创建<code>launch.json</code>和<code>task.json</code>文件，同时创建<code>build</code>文件夹(主要是为了放置编译生成的二进制文件，也可以选择不创建，并且<u>删除下方build字段</u>)书写如下代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"># launch.json<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"># task.json<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-comment">// for the documentation about the tasks.json format</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>至此，所有配置项已完成。如有其他问题，请留言评论区。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 工具配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
